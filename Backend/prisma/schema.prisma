// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id             Int       @id @default(autoincrement())
  firstname      String
  lastname       String
  email          String    @unique
  username       String    @unique
  password       String
  isVerified     Boolean   @default(false)
  createdAt      DateTime  @default(now())
  stripeCustomerId String?
  listings       Listing[]
  likes          Like[]
  notifications  Notification[]
  followers      Follow[]      @relation("following")
  followings     Follow[]      @relation("follower")
  transactions   Transaction[]   @relation("BuyerTransactions")
  reviewsWritten Review[]   @relation("Reviewer")
  reviewsReceived Review[]   @relation("Seller")
  averageRating      Float?     @default(0.0)
  reviewCount        Int        @default(0)
  activities       UserActivity[]
  activePeriods    UserActivePeriods?
  verificationTokens EmailVerificationToken[]
  bids            Bid[]
  cart            Cart?
  }

  model Cart {
  id        Int       @id @default(autoincrement())
  userId    Int       @unique
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     CartItem[]
}

model CartItem {
  id        Int       @id @default(autoincrement())
  cartId    Int
  listingId Int
  quantity  Int
  cart      Cart      @relation(fields: [cartId], references: [id], onDelete: Cascade)
  listing   Listing   @relation(fields: [listingId], references: [id], onDelete: Cascade)

  @@unique([cartId, listingId])
}

model EmailVerificationToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}

  model Review {
  id          Int      @id @default(autoincrement())
  content     String
  rating      Int      // Rating from 1 to 5
  reviewerId  Int
  sellerId    Int
  listingId   Int
  createdAt   DateTime @default(now())
  reviewer    User     @relation(name: "Reviewer", fields: [reviewerId], references: [id], onDelete: Cascade)
  seller      User     @relation(name: "Seller", fields: [sellerId], references: [id], onDelete: Cascade)
  listing     Listing  @relation(fields: [listingId], references: [id], onDelete: Cascade)
}

  model Follow {
  id         Int      @id @default(autoincrement())
  followerId Int
  followingId Int
  createdAt  DateTime @default(now())
  follower   User     @relation("follower", fields: [followerId], references: [id], onDelete: Cascade)
  following  User     @relation("following", fields: [followingId], references: [id], onDelete: Cascade)
}

 model Listing {
  id          Int       @id @default(autoincrement())
  title       String
  description String
  price       Decimal
  category    String
  subcategory String
  condition   String
  brand       String
  imageUrls   String[]
  sellerId    Int
  seller      User      @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  status      String
  likes       Like[]
  transactions Transaction[]  @relation("ListingTransactions")
  reviews        Review[]
  isAuction         Boolean      @default(false)
  initialBid      Decimal?
  currentBid      Decimal?
  auctionEndTime  DateTime?
  bids            Bid[]
  cartItems       CartItem[]
}

model Bid {
  id         Int       @id @default(autoincrement())
  amount     Decimal
  listingId  Int
  userId     Int
  createdAt  DateTime  @default(now())
  listing    Listing   @relation(fields: [listingId], references: [id], onDelete: Cascade)
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  paymentIntentId  String?
  paymentMethodId String?
}

 model Transaction {
  id              Int       @id @default(autoincrement())
  listingId       Int
  buyerId         Int
  paymentIntentId String
  createdAt       DateTime  @default(now())
  listing         Listing   @relation("ListingTransactions", fields: [listingId], references: [id], onDelete: Cascade)
  buyer           User      @relation("BuyerTransactions", fields: [buyerId], references: [id], onDelete: Cascade)
}


model Like {
  id        Int       @id @default(autoincrement())
  userId    Int
  itemId    Int
  createdAt DateTime  @default(now())
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  item      Listing   @relation(fields: [itemId], references: [id], onDelete: Cascade)
}

enum NotificationType {
  FOLLOW
  LIKE
  PURCHASE
  LIKE_PURCHASE
  REVIEW_REMINDER
  BID
}

model Notification {
  id        Int       @id @default(autoincrement())
  content   String
  userId    Int
  isRead    Boolean   @default(false)
  createdAt DateTime  @default(now())
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  type      NotificationType
  usernameTarget  String?
  sellerId         Int?
  listingId  Int?
  listingImage String?
  interactionCount Int     @default(0)
  lastInteractedAt DateTime @default(now())
  isImportant     Boolean  @default(false)
  isPending       Boolean  @default(true)
}

model UserActivity {
  id         Int       @id @default(autoincrement())
  userId     Int
  activityType String
  timestamp  DateTime  @default(now())
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserActivePeriods {
  userId       Int       @id
  mostActivePeriods Json?
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}
