// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id             Int       @id @default(autoincrement())
  firstname      String
  lastname       String
  username       String    @unique
  password       String
  bio            String?
  createdAt      DateTime  @default(now())
  listings       Listing[]
  likes          Like[]
  notifications  Notification[]
  followers      Follow[]      @relation("following")
  followings     Follow[]      @relation("follower")
  transactions   Transaction[]   @relation("BuyerTransactions")
  }

  model Follow {
  id         Int      @id @default(autoincrement())
  followerId Int
  followingId Int
  createdAt  DateTime @default(now())
  follower   User     @relation("follower", fields: [followerId], references: [id])
  following  User     @relation("following", fields: [followingId], references: [id])
}

 model Listing {
  id          Int       @id @default(autoincrement())
  title       String
  description String
  price       Decimal
  category    String
  subcategory String
  condition   String
  brand       String
  imageUrls   String[]
  sellerId    Int
  seller      User      @relation(fields: [sellerId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  status      String
  likes       Like[]
  transactions Transaction[]  @relation("ListingTransactions")
}

 model Transaction {
  id              Int       @id @default(autoincrement())
  listingId       Int
  buyerId         Int
  paymentIntentId String
  createdAt       DateTime  @default(now())
  listing         Listing   @relation("ListingTransactions", fields: [listingId], references: [id])
  buyer           User      @relation("BuyerTransactions", fields: [buyerId], references: [id])
}


model Like {
  id        Int       @id @default(autoincrement())
  userId    Int
  itemId    Int
  createdAt DateTime  @default(now())
  user      User      @relation(fields: [userId], references: [id])
  item      Listing   @relation(fields: [itemId], references: [id])
}

model Notification {
  id        Int       @id @default(autoincrement())
  content   String
  userId    Int
  isRead    Boolean   @default(false)
  createdAt DateTime  @default(now())
  user      User      @relation(fields: [userId], references: [id])
}
